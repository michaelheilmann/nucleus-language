#pragma once

#include "Nucleus/Language/Context-internal.h"
#include "Nucleus/Language/ErrorHandler.h"

#include <assert.h>
#include <stdint.h>
#include <memory.h> /// @todo For memset(). Remove.

struct Nucleus_Language_ScratchSpace
{
    Nucleus_Language_ScratchSpace *next;
    size_t numberOfBytes;
    char bytes[];
}; // struct Nucleus_Language_ScratchSpace


Nucleus_Language_NonNull() static Nucleus_Language_ScratchSpace *
Nucleus_Language_ScratchSpace_create
    (
        Nucleus_Language_Context *context,
        size_t numberOfBytes
    );

Nucleus_Language_NonNull() static void
Nucleus_Language_ScratchSpace_destroy
    (
        Nucleus_Language_Context *context,
        Nucleus_Language_ScratchSpace *scratchSpace
    );

/// @ingroup language
/// @internal
/// @brief Initialize an @a (Nucleus_Language_Context) object.
/// @param context a pointer to the @a (Nucleus_Language_Context) object
/// @return #Nucleus_Language_Status_Success on success, a non-zero status code on failure
Nucleus_Language_NoError() static Nucleus_Language_Status
Nucleus_Language_Context_initialize
    (
        Nucleus_Language_Context *context
    );

/// @ingroup language
/// @internal
/// @brief Uninitialize an @a (Nucleus_Language_Context) object.
/// @param context a pointer to the @a (Nucleus_Language_Context) object
Nucleus_Language_NoError() static void
Nucleus_Language_Context_uninitialize
    (
        Nucleus_Language_Context *context
    );
